// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String       @id @default(uuid())
  email           String       @unique
  emailVerified   Boolean      @default(false)
  firstName       String
  lastName        String?
  countryCode     String?
  timezone        String?
  locale          String?
  avatar          File?
  pictureUrl      String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  joinedTeams     TeamMember[]
  createdTeams    Team[]
  pinnedTeams     PinnedTeam[]
  createdMeetings Meeting[]
  timers          Timer[]
}

enum TeamRole {
  ADMIN
  TEAMMATE
}

model TeamMember {
  id       String   @id @default(uuid())
  team     Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId   String
  member   User     @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId String
  joinedAt DateTime @default(now())
  role     TeamRole @default(TEAMMATE)

  @@unique([teamId, memberId])
}

model PinnedTeam {
  id        String   @id @default(uuid())
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  member    User     @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId  String
  createdAt DateTime @default(now())

  @@unique([teamId, memberId])
}

model Team {
  id         String       @id @default(uuid())
  inviteCode String
  teammates  TeamMember[]
  owner      User         @relation(fields: [ownerId], references: [id])
  logo       File?
  ownerId    String
  name       String
  isArchived Boolean      @default(false)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  pinnedBy   PinnedTeam[]
  meetings   Meeting[]
  timers     Timer[]
}

model File {
  id           String   @id @default(uuid())
  name         String?
  bucket       String
  key          String
  size         Int
  mimetype     String
  userAvatar   User?    @relation(fields: [userAvatarId], references: [id], onDelete: Cascade)
  teamLogo     Team?    @relation(fields: [teamLogoId], references: [id], onDelete: Cascade)
  userAvatarId String?  @unique
  teamLogoId   String?  @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Meeting {
  id          String   @id @default(uuid())
  title       String
  from        DateTime
  to          DateTime
  description String?
  timezone    String?
  owner       User     @relation(fields: [ownerId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     String
  teams       Team[]
  repeat      Json?
}

enum TimerDirection {
  COUNTUP
  COUNTDOWN
}

enum TimerType {
  DATE
  DURATION
}

model Timer {
  id          String          @id @default(uuid())
  title       String
  timezone    String?
  description String?
  direction   TimerDirection? @default(COUNTDOWN)
  type        TimerType
  dateTime    DateTime?
  duration    String?
  owner       User            @relation(fields: [ownerId], references: [id])
  ownerId     String
  teams       Team[]
  startAt     DateTime?       @default(now())
  repeat      Json?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}
