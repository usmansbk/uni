type Meeting {
  id: ID!
  title: String!
  timezone: String!
  from: DateTime!
  to: DateTime!
  description: String
  isOwner: Boolean!
  owner: User!
  teams: [Team]!
  createdAt: DateTime!
  updatedAt: DateTime
  repeat: Recurrence
}

input CreateMeetingInput {
  title: NonEmptyString!
  timezone: NonEmptyString!
  from: DateTime!
  to: DateTime!
  description: NonEmptyString
  teamIds: [ID]
  repeat: RecurrenceInput
}

input UpdateMeetingInput {
  id: ID!
  title: NonEmptyString!
  timezone: NonEmptyString!
  from: DateTime!
  to: DateTime!
  description: NonEmptyString
  teamIds: [ID]
  repeat: RecurrenceInput
}

type Mutation {
  createMeeting(input: CreateMeetingInput!): Meeting! @auth
  updateMeeting(input: UpdateMeetingInput!): Meeting! @auth
  deleteMeeting(id: ID!, reason: NonEmptyString): Meeting! @auth
}

enum MeetingSort {
  past
  upcoming
}

type Query {
  getMeetingById(id: ID!): Meeting! @auth
  getMeetings(sort: MeetingSort = upcoming): MeetingConnection! @auth
}

type MeetingConnection {
  meetings: [Meeting]!
  cursor: ID
}
